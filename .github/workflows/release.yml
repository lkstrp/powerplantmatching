name: Release

on:
  push:
    tags:
      - v*.*.*

env:
  PREPERATION_COMMIT: '[github-actions.ci] auto update powerplants.csv'

jobs:
  check-preperation:
    name: Check if release is prepared
    runs-on: ubuntu-latest
    outputs: 
      prepared: ${{ steps.validate.outputs.prepared }}
    steps:
      - uses: actions/checkout@v3

      - name: Validate commit message
        id: validate
        run: |
          # Check if last commit is the expected commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Expected: '${{ env.PREPERATION_COMMIT }}'"
          echo "Received: '$COMMIT_MESSAGE'"

          prepared="false"
          if [[ "$COMMIT_MESSAGE" == "${{ env.PREPERATION_COMMIT }}" ]]; then
            prepared="true"
          fi

          echo "prepared=$prepared" >> $GITHUB_OUTPUT

  update-dataset:
    name: Update powerplants.csv in repository
    needs: [check-preperation]
    if: ${{ needs.check-preperation.outputs.prepared == 'false' }}
    runs-on: ubuntu-latest
    steps:
    - name: Generate token for PyPSA Bot
      id: generate-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ vars.PYPSA_BOT_ID }}
        private-key: ${{ secrets.PYPSA_BOT_PRIVATE_KEY }}
    
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Find the branch for commit/ tag
      run: |
        commit_sha=$(git rev-list -n 1 ${{ github.ref }})
        branch=$(git branch --contains $commit_sha | grep -v 'detached' | head -n 1 | sed 's/.* //')
        echo "Branch found: $branch"
        echo "BRANCH_NAME=$branch" >> $GITHUB_ENV

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ steps.generate-token.outputs.token }}
        ref: ${{ env.BRANCH_NAME }}
    
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12
    
    - name: Install package
      run: |
        python -m pip install uv
        uv pip install --system ".[dev]"
        
    - name: Create dataset
      run: |
        import powerplantmatching as pm
        df = pm.powerplants(update=True)
        df.to_csv("powerplants.csv", index_label="id")
      shell: python

    - name: Commit changes
      uses: EndBug/add-and-commit@v9
      with:
        message: '${{ env.PREPERATION_COMMIT }}'
        add: 'powerplants.csv'
        tag: '${{ github.ref_name }} --force'
        tag_push: '--force-with-lease'

  build:
    name: Build and verify package
    needs: [check-preperation]
    if: ${{ needs.check-preperation.outputs.prepared == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hynek/build-and-inspect-python-package@v2

  release:
    name: Create GitHub Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: softprops/action-gh-release@v2
        with:
          body: |
            Revised release notes are available in the [documentation](https://powerplantmatching.readthedocs.io/en/latest/release-notes.html).
          append_body: true
          generate_release_notes: true

  # publish:
  #   name: Publish to PyPI
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/project/powerplantmatching/
  #   permissions:
  #     id-token: write
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: Packages
  #         path: dist
  #     - uses: pypa/gh-action-pypi-publish@release/v1
